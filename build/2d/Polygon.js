// Generated by CoffeeScript 1.9.3
var Polygon;

Polygon = (function() {
  function Polygon(points) {
    this.points = points;
    this.position = new Point(0, 0);
    this.color = "green";
  }

  Polygon.prototype.draw = function(context) {
    var i, l, oldWidth, v, worldPoints;
    oldWidth = context.lineWidth;
    context.beginPath();
    context.lineWidth = "5";
    context.strokeStyle = this.color;
    context.fillStyle = this.color;
    i = 0;
    l = this.points.length;
    worldPoints = this.getWorldPoints();
    while (i < l) {
      v = worldPoints[i];
      if (i === 0) {
        context.moveTo(v.x, v.y);
      }
      context.lineTo(v.x, v.y);
      context.stroke();
      context.fill();
      i++;
    }
    context.lineWidth = oldWidth;
  };

  Polygon.prototype.intersects = function(other) {
    var intersectionFound, k, len, len1, m, point, ref, ref1;
    intersectionFound = false;
    ref = this.getWorldPoints();
    for (k = 0, len = ref.length; k < len; k++) {
      point = ref[k];
      if (point.isInside(other)) {
        intersectionFound = true;
        break;
      }
    }
    if (!intersectionFound) {
      ref1 = other.getWorldPoints();
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        point = ref1[m];
        if (point.isInside(this)) {
          intersectionFound = true;
          break;
        }
      }
    }
    return intersectionFound;
  };

  Polygon.prototype.getWorldPoints = function() {
    var k, len, point, ref, worldPoints;
    worldPoints = [];
    ref = this.points;
    for (k = 0, len = ref.length; k < len; k++) {
      point = ref[k];
      worldPoints.push(new Point(point.x + this.position.x, point.y + this.position.y));
    }
    return worldPoints;
  };

  Polygon.prototype.getPolygonCenter = function() {
    var f, i, j, nPts, p1, p2, twicearea, x, y;
    twicearea = 0;
    x = 0;
    y = 0;
    nPts = this.points.length;
    p1 = void 0;
    p2 = void 0;
    f = void 0;
    i = 0;
    j = nPts - 1;
    while (i < nPts) {
      p1 = this.points[i];
      p2 = this.points[j];
      f = p1.x * p2.y - p2.x * p1.y;
      twicearea += f;
      x += (p1.x + p2.x) * f;
      y += (p1.y + p2.y) * f;
      j = i++;
    }
    f = twicearea * 3;
    return new Point(x / f + this.position.x, y / f + this.position.y);
  };

  return Polygon;

})();
