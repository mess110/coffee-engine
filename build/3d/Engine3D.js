// Generated by CoffeeScript 1.9.3
var Engine3D,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Engine3D = (function() {
  function Engine3D() {
    this.render = bind(this.render, this);
    this.onDocumentKeyboardEvent = bind(this.onDocumentKeyboardEvent, this);
    this.onDocumentMouseEvent = bind(this.onDocumentMouseEvent, this);
    var camera;
    this.config = Config.get();
    this.width = this.config.width;
    this.height = this.config.height;
    this.time = void 0;
    this.renderer = new THREE.WebGLRenderer({
      antialias: this.config.antialias
    });
    this.renderer.setSize(this.width, this.height);
    this.renderer.setClearColor(0xc2ba9d, 1);
    document.body.appendChild(this.renderer.domElement);
    camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 1000);
    this.setCamera(camera);
    this.camera.position.z = 10;
    this.anaglyphEffect = new THREE.AnaglyphEffect(this.renderer);
    this.anaglyphEffect.setSize(this.width, this.height);
    this.anaglyphEffect.setDistanceBetweenGlyphs(this.config.anaglyphDistance);
    this.projector = new THREE.Projector();
    this.sceneManager = SceneManager.get();
    document.addEventListener("mouseup", this.onDocumentMouseEvent, false);
    document.addEventListener("mousedown", this.onDocumentMouseEvent, false);
    document.addEventListener("mousemove", this.onDocumentMouseEvent, false);
    document.addEventListener("keydown", this.onDocumentKeyboardEvent, false);
    document.addEventListener("keyup", this.onDocumentKeyboardEvent, false);
    if (this.config.contextMenuDisabled) {
      document.addEventListener("contextmenu", function(e) {
        return e.preventDefault();
      }, false);
    }
    this.statsManager = StatsManager.get();
    if (this.config.showStatsOnLoad) {
      this.statsManager.toggle();
    }
  }

  Engine3D.prototype.onDocumentMouseEvent = function(event) {
    var raycaster;
    raycaster = this._parseMouseEvent(event);
    if (raycaster != null) {
      return this.sceneManager.currentScene().doMouseEvent(event, raycaster);
    }
  };

  Engine3D.prototype.onDocumentKeyboardEvent = function(event) {
    return this.sceneManager.currentScene().doKeyboardEvent(event);
  };

  Engine3D.prototype.setCursor = function(url) {
    return document.body.style.cursor = "url('" + url + "'), auto";
  };

  Engine3D.prototype.setCamera = function(camera) {
    this.camera = camera;
    if (this.config.resize) {
      return this.winResize = new THREEx.WindowResize(this.renderer, this.camera);
    }
  };

  Engine3D.prototype.addScene = function(scene) {
    this.sceneManager.addScene(scene);
    if (this.sceneManager.currentSceneIndex == null) {
      return this.sceneManager.setScene(scene);
    }
  };

  Engine3D.prototype.removeScene = function(scene) {
    return this.sceneManager.removeScene(scene);
  };

  Engine3D.prototype.render = function() {
    var now, tpf;
    requestAnimationFrame(this.render);
    this.width = window.innerWidth;
    this.height = window.innerHeight;
    now = new Date().getTime();
    tpf = (now - (this.time || now)) / 1000;
    this.time = now;
    this.sceneManager.tick(tpf);
    this.statsManager.update(this.renderer);
    TWEEN.update();
    this.renderer.render(this.sceneManager.currentScene().scene, this.camera);
    if (this.config.anaglyph) {
      return this.anaglyphEffect.render(this.sceneManager.currentScene().scene, this.camera);
    }
  };

  Engine3D.prototype._parseMouseEvent = function(event) {
    var mouseX, mouseY, vector;
    if (this.config.preventDefaultMouseEvents) {
      event.preventDefault();
    }
    if (event.target === this.renderer.domElement) {
      mouseX = (event.layerX / this.width) * 2 - 1;
      mouseY = -(event.layerY / this.height) * 2 + 1;
      vector = new THREE.Vector3(mouseX, mouseY, 0.5);
      this.projector.unprojectVector(vector, this.camera);
      return new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize());
    }
  };

  return Engine3D;

})();
