// Generated by CoffeeScript 1.4.0
var BaseModel;

BaseModel = (function() {

  function BaseModel() {
    this.mesh = void 0;
    this.visible = true;
  }

  BaseModel.prototype.setRotation = function(x, y, z) {
    this.mesh.rotation.x = x;
    this.mesh.rotation.y = y;
    return this.mesh.rotation.z = z;
  };

  BaseModel.prototype.setPosition = function(x, y, z) {
    if (y != null) {
      this.mesh.position.x = x;
      this.mesh.position.y = y;
      return this.mesh.position.z = z;
    } else {
      this.mesh.position.x = x['x'] != null ? x['x'] : 0;
      this.mesh.position.y = x['y'] != null ? x['y'] : 0;
      this.mesh.position.z = x['z'] != null ? x['z'] : 0;
      this.mesh.rotation.x = x['rX'] != null ? x['rX'] : 0;
      this.mesh.rotation.y = x['rY'] != null ? x['rY'] : 0;
      return this.mesh.rotation.z = x['rZ'] != null ? x['rZ'] : 0;
    }
  };

  BaseModel.prototype.getTweenFromPosition = function() {
    return {
      x: this.mesh.position.x,
      y: this.mesh.position.y,
      z: this.mesh.position.z,
      rX: this.mesh.rotation.x,
      rY: this.mesh.rotation.y,
      rZ: this.mesh.rotation.z
    };
  };

  BaseModel.prototype.setPositionX = function(x) {
    return this.mesh.position.x = x;
  };

  BaseModel.prototype.setPositionY = function(y) {
    return this.mesh.position.y = y;
  };

  BaseModel.prototype.setPositionZ = function(z) {
    return this.mesh.position.z = z;
  };

  BaseModel.prototype.modifyPosition = function(x, y, z) {
    this.mesh.position.x += x;
    this.mesh.position.y += y;
    return this.mesh.position.z += z;
  };

  BaseModel.prototype.setVisibility = function(b) {
    this.mesh.traverse(function(object) {
      return object.visible = b;
    });
    return this.visible = b;
  };

  BaseModel.prototype.isPressed = function(raycaster) {
    return raycaster.intersectObject(this.mesh).length > 0;
  };

  BaseModel.prototype.isHovered = function(raycaster) {
    return raycaster.intersectObject(this.mesh).length > 0;
  };

  BaseModel.prototype.attachParticle = function(particle) {
    if (this.mesh != null) {
      this.particle = particle;
      this.particle.attached = true;
      return this.mesh.add(particle.mesh);
    }
  };

  BaseModel.prototype.detachParticle = function() {
    if ((this.mesh != null) && (this.particle != null)) {
      this.mesh.remove(this.particle.mesh);
      this.particle.attached = false;
      return this.particle = void 0;
    }
  };

  return BaseModel;

})();
