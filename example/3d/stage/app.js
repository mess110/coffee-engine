// Generated by CoffeeScript 1.10.0
var BloodParticle, GameScene, camera, config, engine, jm, loadingScene, objs, rainbow, tm, vj,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

rainbow = new Rainbow();

rainbow.setSpectrum('red', 'white');

rainbow.setNumberRange(1, 20);

if (!localStorage.getItem('localStorageInitialized')) {
  localStorage.setItem('localStorageInitialized', 'yezzer');
  localStorage.setItem('spotLightColorEffect', 'yezzer');
  localStorage.setItem('bloodEffect', 'yezzer');
}

tm = TextureManager.get();

jm = JsonModelManager.get();

vj = new VirtualController();

vj.joystick2.addEventListener('touchStart', function() {
  var cs;
  cs = SceneManager.get().currentScene();
  return cs.shooting = true;
});

config = Config.get();

config.fillWindow();

config.maxNameLength = 14;

config.name = prompt("name (14 chars max)", "AAA");

if (config.name == null) {
  config.name = 'AAA';
}

config.name = config.name.substring(0, config.maxNameLength);

config.sendHighScores = document.location.hostname !== "localhost";

config.spotLightColorEffect = localStorage.getItem('spotLightColorEffect');

config.bloodEffect = localStorage.getItem('bloodEffect');

jNorthPole.BASE_URL = 'https://json.northpole.ro/';

// please don't :);

jNorthPole.API_KEY = atob('YWN0aQ==');

jNorthPole.SECRET = atob('YWN0aV9wbHpfbjBfaDRja3o');

camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 10000);

engine = new Engine3D();

engine.setCamera(camera);

camera.position.set(0, 20, 27);

camera.lookAt(new THREE.Vector3(0, 0, 0));

SoundManager.get().add('shotgun', 'sounds/shotgun.wav');

SoundManager.get().add('hit', 'sounds/hit.wav');

Helper.fancyShadows(engine.renderer);

Number.prototype.toRoman = function() {
  var i, num, r, s, toBigRoman, v, val;
  num = Math.floor(this);
  if (num === 0) {
    return 'O';
  }
  val = void 0;
  s = '';
  i = 0;
  v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
  r = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];
  toBigRoman = function(n) {
    var magnitude, n1, prefix, rem, ret, suffix;
    ret = '';
    n1 = '';
    rem = n;
    while (rem > 1000) {
      prefix = '';
      suffix = '';
      n = rem;
      s = '' + rem;
      magnitude = 1;
      while (n > 1000) {
        n /= 1000;
        magnitude *= 1000;
        prefix += '(';
        suffix += ')';
      }
      n1 = Math.floor(n);
      rem = s - (n1 * magnitude);
      ret += prefix + n1.toRoman() + suffix;
    }
    return ret + rem.toRoman();
  };
  if (this - num || num < 1) {
    num = 0;
  }
  if (num > 3999) {
    return toBigRoman(num);
  }
  while (num) {
    val = v[i];
    while (num >= val) {
      num -= val;
      s += r[i];
    }
    ++i;
  }
  return s;
};

BloodParticle = (function(superClass) {
  extend(BloodParticle, superClass);

  function BloodParticle() {
    this.particleGroup = new SPE.Group({
      texture: tm.items['splatter'],
      maxAge: 0.2,
      blending: THREE.NormalBlending,
      hasPerspective: true,
      colorize: true
    });
    this.emitter = new SPE.Emitter({
      position: new THREE.Vector3(0, 0, 0),
      positionSpread: new THREE.Vector3(2, 2, 2),
      acceleration: new THREE.Vector3(0, 0, 0),
      accelerationSpread: new THREE.Vector3(0, 0, 0),
      velocity: new THREE.Vector3(0, 0, -20),
      velocitySpread: new THREE.Vector3(10, 10, 10),
      colorStart: new THREE.Color('red'),
      colorMiddle: new THREE.Color('red'),
      colorEnd: new THREE.Color('red'),
      sizeStart: 0,
      sizeMiddle: 4,
      sizeEnd: 5,
      particleCount: 1000
    });
    this.particleGroup.addEmitter(this.emitter);
    this.mesh = this.particleGroup.mesh;
  }

  return BloodParticle;

})(BaseParticle);

GameScene = (function(superClass) {
  extend(GameScene, superClass);

  function GameScene() {
    var box, dgeometry, geometry, mat, material, texture;
    GameScene.__super__.constructor.call(this);
    this.particle2 = new BloodParticle();
    this.particle2.emitter.disable();
    this.scene.add(this.particle2.mesh);
    this.splats = [];
    this.bunnies = [];
    this.started = false;
    this.cameraTweening = false;
    this.score = 0;
    this.ambientLights = [Helper.ambientLight(), Helper.ambientLight(), Helper.ambientLight(), Helper.ambientLight()];
    this.killingSpree = 0;
    this.shooting = false;
    box = new THREE.BoxGeometry(1, 1, 1);
    mat = new THREE.MeshPhongMaterial({
      color: 0xff0000
    });
    this.spotLight = new SpotLight(0, 30, 25);
    this.spotLight.addToScene(this.scene);
    this.spawnBunny(true);
    this.dynamicTexture = new THREEx.DynamicTexture(256, 256);
    this.dynamicTexture.context.font = "24px 'Forum' cursive";
    this.dynamicTexture.drawText('');
    dgeometry = new THREE.PlaneBufferGeometry(10, 10);
    this.dmaterial = new THREE.MeshBasicMaterial({
      map: this.dynamicTexture.texture,
      transparent: true,
      opacity: 0
    });
    this.floatingCombatText = new THREE.Mesh(dgeometry, this.dmaterial);
    this.scene.add(this.floatingCombatText);
    this.bear = jm.clone('bear_all');
    this.bear.receiveShadow = true;
    this.bear.castShadow = true;
    this.bear.position.set(0, 0, 0);
    this.bear.animations[0].play();
    this.bear.speed = 5;
    this.scene.add(this.bear);
    if (this.bear != null) {
      this.spotLight.lookAt(this.bear);
    }
    this.cameraPosition(0);
    this.shotgun = jm.clone('shotgun');
    this.shotgun.receiveShadow = true;
    this.shotgun.castShadow = true;
    this.shotgun.animations[1].loop = false;
    this.shotgun.scale.set(0.3, 0.3, 0.3);
    this.shotgun.position.set(0, 3, 2.5);
    this.bear.add(this.shotgun);
    this.particle = new BaseParticle({
      group: {
        textureUrl: 'imgs/star.png',
        maxAge: 0.2,
        colorize: true,
        hasPerspective: true,
        blending: 2,
        transparent: true,
        alphaTest: 0.5
      }
    });
    this.particle.mesh.rotation.set(Math.PI / 2, 0, 0);
    this.particle.mesh.position.set(0, 0.75, 5);
    this.particle.mesh.visible = false;
    this.shotgun.add(this.particle.mesh);
    this.drapesBg = jm.clone('drapes');
    this.drapesBg.receiveShadow = true;
    this.drapesBg.castShadow = true;
    this.drapesBg.position.set(0, 0, -15);
    this.drapesBg.scale.set(3.5, 2, 1);
    this.drapes = jm.clone('drapes2');
    this.drapes.receiveShadow = true;
    this.drapes.castShadow = true;
    this.drapes.opened = false;
    this.drapes.position.set(0, 0, 15);
    this.drapes.scale.x = 2;
    this.mask = jm.clone('theater_mask');
    this.mask.receiveShadow = true;
    this.mask.castShadow = true;
    this.mask.position.set(0, 16, 16);
    this.scene.add(this.mask);
    texture = tm.items['diffuse'];
    texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(6, 6);
    mat = new THREE.MeshPhongMaterial({
      shininess: 0,
      map: texture,
      combine: THREE.MixOperation,
      reflectivity: 0.00
    });
    geometry = new THREE.PlaneGeometry(80, 80, 32);
    material = new THREE.MeshBasicMaterial({
      color: 0xffff00,
      side: THREE.DoubleSide
    });
    this.plane = new THREE.Mesh(geometry, mat);
    this.plane.receiveShadow = true;
    this.plane.castShadow = true;
    this.plane.position.z = -20;
    this.plane.rotation.set(-Math.PI / 2, 0, Math.PI / 2);
    this.scene.add(this.plane);
    this.raycaster = new THREE.Raycaster();
    this.splatElevation = 0;
    this.splatTexture = tm.items['splatter'];
    this.loaded = true;
  }

  GameScene.prototype.mkSplat = function(pos) {
    var splat, splatGeometry;
    if (!config.bloodEffect) {
      return;
    }
    this.splatElevation += 0.0003;
    this.splatMat = new THREE.MeshPhongMaterial({
      map: this.splatTexture,
      transparent: true,
      opacity: 0.0
    });
    splatGeometry = new THREE.PlaneBufferGeometry(5, 5);
    splat = new THREE.Mesh(splatGeometry, this.splatMat);
    splat.receiveShadow = true;
    splat.position.set(pos.x, this.splatElevation, pos.z);
    splat.rotation.set(-Math.PI / 2, 0, Math.random() * Math.PI);
    this.splats.push(splat);
    return this.scene.add(splat);
  };

  GameScene.prototype.toggleLights = function() {
    var action, j, len, light, ref;
    action = this.lights ? 'remove' : 'add';
    ref = this.ambientLights;
    for (j = 0, len = ref.length; j < len; j++) {
      light = ref[j];
      this.scene[action](light);
    }
    return this.lights = !this.lights;
  };

  GameScene.prototype.tick = function(tpf) {
    var bunny, bunnyPosition, bunnySpawnPoint, closestDistToBear, colorDest, direction, distToBear, geometry, hit, intersected, intersects, j, k, len, len1, matrix, pnt, reactionHitVector, ref, ref1, snd, splat, tween;
    if (!this.loaded) {
      return;
    }
    if (this.particle != null) {
      this.particle.tick(tpf);
    }
    if (this.particle2 != null) {
      this.particle2.tick(tpf);
    }
    if (this.mask && this.drapes) {
      this.mask.castShadow = !this.drapes.opened && this.selectedCameraPosition !== 1;
    }
    this.floatingCombatText.position.y += tpf;
    if (this.dmaterial.opacity - tpf <= 0) {
      this.dmaterial.opacity = 0;
    } else {
      this.dmaterial.opacity -= tpf;
    }
    if ((this.bear != null) && (this.shotgun != null) && this.bunnies.any()) {
      this.spotLight.lookAt(this.bear);
      this.moving = false;
      if (this.gameOver) {
        return;
      }
      if ((this.keyboard.pressed(' ') || this.shooting) && !this.shotgun.animations[1].isPlaying) {
        if (!this.started) {
          this.toggleDrapes();
        }
        this.shotgun.animations[1].play();
        this.particle.mesh.visible = true;
        setTimeout((function(_this) {
          return function() {
            return _this.particle.mesh.visible = false;
          };
        })(this), 150);
        snd = SoundManager.get().sounds['shotgun'];
        snd.volume = 0.4;
        snd.playbackRate = 1.3;
        snd.play('shotgun');
        if (!this.started) {
          this.spotLight.setColor("white");
          return;
        }
        matrix = new THREE.Matrix4;
        matrix.extractRotation(this.bear.matrix);
        direction = new THREE.Vector3(0, 0, 1);
        direction.applyMatrix4(matrix);
        this.raycaster.set(this.bear.position, direction);
        intersects = this.raycaster.intersectObjects(this.bunnies);
        if (intersects.any()) {
          if (this.killingSpree <= 8) {
            this.killingSpree += 1;
          }
          pnt = intersects[0].point;
          if (config.bloodEffect) {
            this.particle2.mesh.position.set(pnt.x, pnt.y + 2, pnt.z);
            this.particle2.mesh.lookAt(this.bear.position);
            this.particle2.emitter.enable();
          }
          reactionHitVector = pnt.clone().add(direction.clone().normalize().multiplyScalar(40));
          reactionHitVector.y = this.getRandomArbitrary(20, 30);
          geometry = new THREE.Geometry;
          geometry.vertices.push(this.bear.position);
          geometry.vertices.push(reactionHitVector);
          this.scene.remove(this.line);
          this.line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
            color: 'gold'
          }));
          SoundManager.get().play('hit');
          hit = this.killingSpree;
          if (hit < 1) {
            hit = 1;
          }
          this.score += hit;
          this.dynamicTexture.clear();
          this.dynamicTexture.drawText("+" + (hit.toRoman()), 32, 64, '#fefefe');
          this.dmaterial.opacity = 1;
          this.floatingCombatText.lookAt(camera.position);
          this.floatingCombatText.position.copy(pnt);
          document.getElementById('count').innerHTML = this.score.toRoman();
          document.getElementById('count').className = 'more-points';
          setTimeout(function() {
            return document.getElementById('count').className = '';
          }, 700);
          intersected = intersects.first().object;
          bunnySpawnPoint = this.getBunnySpawnPoint();
          bunnyPosition = intersected.position.clone();
          intersected.dead = true;
          tween = new TWEEN.Tween(bunnyPosition).to(reactionHitVector, 6000).onUpdate(function() {
            intersected.position.set(this.x, this.y, this.z);
          }).easing(TWEEN.Easing.Exponential.Out).onComplete((function(_this) {
            return function() {
              intersected.position.copy(bunnySpawnPoint);
              intersected.dead = false;
              intersected.position.y = 0;
              intersected.animations[1].play();
              return delete intersected.deathAnimated;
            };
          })(this)).start();
          setTimeout((function(_this) {
            return function() {
              _this.particle2.emitter.disable();
              _this.mkSplat(pnt);
              return _this.spawnBunny();
            };
          })(this), 350);
        } else {
          this.killingSpree = 0;
        }
      }
      if (!this.started) {
        return;
      }
      if (this.keyboard.pressed('w') || this.keyboard.pressed('up') || vj.joystick1.up()) {
        this.moving = true;
        this.bear.translateZ(tpf * this.bear.speed);
      }
      if (this.keyboard.pressed('s') || this.keyboard.pressed('down') || vj.joystick1.down()) {
        this.moving = true;
        this.bear.translateZ(-tpf * this.bear.speed);
      }
      if (this.keyboard.pressed('a') || this.keyboard.pressed('left') || vj.joystick1.left()) {
        this.moving = true;
        this.bear.rotation.y += tpf * this.bear.speed / 2;
      }
      if (this.keyboard.pressed('d') || this.keyboard.pressed('right') || vj.joystick1.right()) {
        this.moving = true;
        this.bear.rotation.y -= tpf * this.bear.speed / 2;
      }
      if (this.bear.animations[0].isPlaying && this.moving) {
        this.bear.animations[1].play();
        this.bear.animations[0].stop();
      }
      if (this.bear.animations[1].isPlaying && !this.moving) {
        this.bear.animations[0].play();
        this.bear.animations[1].stop();
      }
      ref = this.splats;
      for (j = 0, len = ref.length; j < len; j++) {
        splat = ref[j];
        if (splat.material.opacity < 0.5) {
          splat.material.opacity += tpf;
        }
      }
      closestDistToBear = 30;
      ref1 = this.bunnies;
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        bunny = ref1[k];
        if (!bunny.dead) {
          bunny.lookAt(this.bear.position);
        }
        if (this.moving) {
          bunny.translateZ(tpf * bunny.speed);
        }
        distToBear = bunny.position.distanceTo(this.bear.position);
        if (!bunny.dead) {
          if (distToBear < 2.5) {
            this.gameOver = true;
            this.toggleDrapes();
            this.resetScene();
          }
        }
        if (bunny.dead && !bunny.deathAnimated) {
          bunny.deathAnimated = true;
          bunny.animations[0].stop();
          bunny.animations[1].stop();
          bunny.animations[2].play();
        } else {
          if (distToBear < closestDistToBear) {
            closestDistToBear = distToBear;
          }
          if (bunny.animations[0].isPlaying && this.moving) {
            bunny.animations[0].stop();
            bunny.animations[1].play();
            bunny.animations[2].stop();
          }
          if (bunny.animations[1].isPlaying && !this.moving) {
            bunny.animations[0].play();
            bunny.animations[1].stop();
            bunny.animations[2].stop();
          }
        }
      }
      if (config.spotLightColorEffect) {
        colorDest = rainbow.colourAt(closestDistToBear);
        this.spotLight.setColor("#" + colorDest);
      } else {
        this.spotLight.setColor("white");
      }
    }
    return this.shooting = false;
  };

  GameScene.prototype.jNorthPoleError = function(data, status) {
    document.getElementById('highscore').className = 'hidden';
    console.log("jNorthPole error: " + status);
    return console.log(data);
  };

  GameScene.prototype.getHighScores = function() {
    return jNorthPole.getStorage({
      api_key: jNorthPole.API_KEY,
      secret: jNorthPole.SECRET,
      '__limit': 5,
      '__sort': {
        score: 'desc'
      }
    }, function(data) {
      var err, error, j, len, s, u;
      s = '';
      for (j = 0, len = data.length; j < len; j++) {
        u = data[j];
        try {
          s += "<li>" + (u.name.substring(0, config.maxNameLength)) + " <span class='highlight'>" + (u.score.toRoman()) + "</span></li>";
        } catch (error) {
          err = error;
          console.log(u);
          console.log(err);
        }
      }
      return document.getElementById('highscoreList').innerHTML = s;
    }, this.jNorthPoleError);
  };

  GameScene.prototype.resetScene = function() {
    this.spotLight.setColor('white');
    jNorthPole.createStorage({
      name: config.name.substring(0, config.maxNameLength),
      score: this.score,
      api_key: jNorthPole.API_KEY,
      secret: jNorthPole.SECRET
    }, function(data) {
      console.log(data);
      return SceneManager.get().currentScene().getHighScores();
    }, this.jNorthPoleError);
    this.cameraPosition(0);
    return setTimeout((function(_this) {
      return function() {
        var bunny, j, k, len, len1, ref, ref1, splat;
        _this.bear.position.set(0, 0, 0);
        _this.bear.rotation.set(0, 0, 0);
        ref = _this.bunnies;
        for (j = 0, len = ref.length; j < len; j++) {
          bunny = ref[j];
          _this.scene.remove(bunny);
        }
        _this.bunnies = [];
        ref1 = _this.splats;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          splat = ref1[k];
          _this.scene.remove(splat);
        }
        _this.splats = [];
        _this.splatElevation = 0;
        _this.started = false;
        _this.gameOver = false;
        _this.killingSpree = 0;
        _this.scene.remove(_this.line);
        _this.floatingCombatText.position.y = 100;
        return _this.spawnBunny(true);
      };
    })(this), 1000);
  };

  GameScene.prototype.getRandomArbitrary = function(min, max) {
    return Math.random() * (max - min) + min;
  };

  GameScene.prototype.spawnBunny = function(first) {
    var bunny;
    if (first == null) {
      first = false;
    }
    bunny = jm.clone('bunny_all');
    bunny.receiveShadow = true;
    bunny.castShadow = true;
    if (first) {
      bunny.position.set(2, 0, 20);
    } else {
      bunny.position.copy(this.getBunnySpawnPoint());
    }
    bunny.scale.set(0.5, 0.5, 0.5);
    bunny.animations[1].play();
    bunny.animations[2].loop = false;
    bunny.speed = 3;
    bunny.dead = false;
    this.bunnies.push(bunny);
    return this.scene.add(bunny);
  };

  GameScene.prototype.cameraPosition = function(i) {
    var e;
    if (i == null) {
      i = 0;
    }
    if (this.cameraTweening) {
      return;
    }
    this.cameraTweening = true;
    e = [
      {
        x: 0,
        y: 20,
        z: 27
      }, {
        x: 0,
        y: 33,
        z: 0
      }
    ][i];
    this.selectedCameraPosition = i;
    this.cameraTweening = true;
    this.tweenMoveTo({
      position: new THREE.Vector3(e.x, e.y, e.z)
    }, camera, 500);
    setTimeout((function(_this) {
      return function() {
        return _this.tweenLookAt({
          position: new THREE.Vector3(0, 0, 0)
        }, camera, 500);
      };
    })(this), 501);
    return setTimeout((function(_this) {
      return function() {
        return _this.cameraTweening = false;
      };
    })(this), 1001);
  };

  GameScene.prototype.toggleCamera = function() {
    var i;
    i = this.selectedCameraPosition === 0 ? 1 : 0;
    return this.cameraPosition(i);
  };

  GameScene.prototype.getBunnySpawnPoint = function() {
    var angle, radius;
    angle = Math.random() * Math.PI * 2;
    radius = this.getRandomArbitrary(20, 30);
    return {
      x: Math.cos(angle) * radius,
      y: 0,
      z: Math.sin(angle) * radius
    };
  };

  GameScene.prototype.toggleDrapes = function() {
    var count, help, highscore, menu, score;
    if (this.drapes.animations[0].isPlaying) {
      return;
    }
    count = document.getElementById('count');
    menu = document.getElementById('menu');
    help = document.getElementById('help');
    score = document.getElementById('score');
    highscore = document.getElementById('highscore');
    if (this.started === false) {
      this.score = 0;
      count.innerHTML = this.score.toRoman();
      menu.className = 'hidden';
      help.className = 'hidden';
      score.className = 'visible';
      highscore.className = 'hidden';
    } else {
      menu.className = 'visible';
      help.className = 'visible';
      highscore.className = 'visible';
    }
    this.started = true;
    this.drapes.animations[0].play();
    setTimeout((function(_this) {
      return function() {
        return _this.drapes.opened = !_this.drapes.opened;
      };
    })(this), this.drapes.opened ? (this.drapes.animations[0].data.length * 1000 - 100) / 3 : (this.drapes.animations[0].data.length * 1000 - 100) / 4 * 3 - 150);
    return setTimeout((function(_this) {
      return function() {
        _this.drapes.animations[0].stop();
        return _this.drapes.animations[0].timeScale *= -1;
      };
    })(this), this.drapes.animations[0].data.length * 1000 - 100);
  };

  GameScene.prototype.doMouseEvent = function(event, raycaster) {};

  GameScene.prototype.doKeyboardEvent = function(event) {
    if (event.type !== 'keyup') {
      return;
    }
    if (this.drapes == null) {
      return;
    }
    if (event.which === 49) {
      this.cameraPosition(0);
    }
    if (event.which === 50) {
      this.cameraPosition(1);
    }
    if (event.which === 67) {
      this.toggleCamera();
    }
    if (event.which === 86) {
      if (config.spotLightColorEffect != null) {
        localStorage.removeItem("spotLightColorEffect");
      } else {
        localStorage.setItem("spotLightColorEffect", "yezzer");
      }
      config.spotLightColorEffect = localStorage.getItem('spotLightColorEffect');
    }
    if (event.which === 66) {
      if (config.bloodEffect != null) {
        localStorage.removeItem("bloodEffect");
      } else {
        localStorage.setItem("bloodEffect", "yezzer");
      }
      return config.bloodEffect = localStorage.getItem('bloodEffect');
    }
  };

  return GameScene;

})(BaseScene);

objs = ['./models/bear_all.json', './models/bunny_all.json', './models/shotgun.json', './models/drapes.json', './models/drapes2.json', './models/theater_mask.json', './imgs/splatter.png', './models/diffuse.png', './imgs/star.png'];

loadingScene = new LoadingScene(objs, function() {
  var gameScene;
  gameScene = new GameScene();
  engine.addScene(gameScene);
  return engine.sceneManager.setScene(gameScene);
});

engine.addScene(loadingScene);

engine.render();
